- TO DO JUST AFTER 2.1
	- integrate CHKPII into our build process
	- review existing/new tools - decide to drop or improve them e.g. the html editor tool

- Tools
	- update existing tools which have been used before to run on the newest builds early enough

- Javadoc
	- spelling
		(tool opportunity)
	- grammar
	- completeness
	- @since tags
	- correctness
		- return value (can null be returned?)
		- parameter list (can null be passed as parameter?)
		- exceptions
	- package.html files
		-copyright/licence
		
- plug-in versions (manifest.mf, plugin.xml)
	- make sure all Bundle-Versions have been updated according to http://wiki.eclipse.org/index.php/Version_Numbering
	- make sure all lower bounds of Require-Bundle entries are set to the latest available version that has been used
		
- copyright/license
	- every file NOTE: this includes the schema files (.exsd)
	- list of contributors
	- it is not good enough to change the referenced image because of the alt attribute
		
- checking NLS
 - no not-externalized strings (we have a tool)
 - no duplicated keys in .properties files (we have a tool)
 - no unused keys in .properties files (we have a tool - NOTE: this might be dangerous to do)
 - no missing keys in .properties files (we have a tool)
 - no single quotes in .properties files (this is checked by CHKPII, but it's not publicly available)

- properties files
	- spelling
		(tool: extract property file - see also bug 35036 - the current tool only collects the property files into one file and removes the '&' and keys)
	- grammar
	- style (in particular error messages)
		see: Jeff Johnson GUI Bloopers
	- capitalization
		booktitle capitalization vs. sentence capitalization
	
- help context ids
	- completeness
	- cross checking with the xml files (we have a tool)
	- all help context ids are defined as constants (we have a tool but this has bugs in this area)
		(including the ones define in XML)
	
- CVS file types checking
	- informing releng about exceptions (e.g. binary files)

- code
	- no System.out.println in source (easy to search for)
	- no empty catch blocks (we have never done this) 
	- no unused elements (imports, members, temps) (compiler checks that)
	- no use of deprecated APIs (where possible) (compiler checks that)
	- no use of internal APIs (where possible) (we have a tool)
	- no mixed line delimiters (we have a tool)
	
- UI
	- default values pass over preferences
	- artwork finish pass
	- mnemonics
	- accessibility (e.g. view toolbar actions)
	
- ISV doc
	- schema file completeness:
		- each schema must be declared in the plugin.xml
		- if a plug-in contains schemas its plugin.xml must be listed in buildDoc.xml (see pde.convertSchemaToHTML)
		- each generated schema html file must be listed in topics_Reference.xml
		- each generated schema html file must be listed in <doc-plug-in>/reference/extension-points/index.html
	- if a structural change (e.g. source folder rename) takes place the *options and options.txt must be adapted
	- if a new API package has been added
		- it must be added to *options and *options.txt
		- its package-sumary.html must be listed in topics_Reference.html
	- examples up to date
	
- User doc
	- welcome page up to date
	- screenshots
	
- Overall (ISV doc, User doc, other files) - to just at the end
	- run tool (e.g. HTML Power Tools) which ensures ALT attribute is set
	- run tool (e.g. HTML Power Tools) which checks spelling
	- run tool (I use Xenu's Link Sleuth) which checks that no links are broken (must be run against Linux or special web server to find capitalization bugs)
		- the easiest way to test the Help Contents is to point the link checker to the help system's index page (e.g. http://127.0.0.1:1470/help/index.jsp)
		- the easiest way to test the context help is to
			1. convert the contexts_*.xml files to HTML (we have a tool)
			2. create a top-level HTML file which has one link to each of our contexts-HTML files (the 2.1 version is appended below)
		- the topics_*.xml files will also be converted by our tool. Tip: toc.html points to all other topic HTML files



***** BEGIN LINK TESTING TEMPLATE *****
<a href="http://localhost/org.eclipse.pde.doc.user/contexts_PDE.html">a</a><br>
<a href="http://localhost/org.eclipse.pde.doc.user/toc.html">a</a><br>

<a href="http://localhost/org.eclipse.jdt.doc.user/contexts_JDT.html">a</a><br>
<a href="http://localhost/org.eclipse.jdt.doc.user/contexts_Debugger.html">a</a><br>
<a href="http://localhost/org.eclipse.jdt.doc.user/contexts_JDT_Debugger.html">a</a><br>
<a href="http://localhost/org.eclipse.jdt.doc.user/contexts_JDT_JUnit.html">a</a><br>

<a href="http://localhost/org.eclipse.jdt.doc.user/toc.html">a</a><br>

<a href="http://localhost/org.eclipse.jdt.doc.isv/toc.html">a</a><br>

<a href="http://localhost/org.eclipse.platform.doc.isv/toc.html">a</a><br>

<a href="http://localhost/org.eclipse.platform.doc.user/contexts_Compare.html">a</a><br>
<a href="http://localhost/org.eclipse.platform.doc.user/contexts_Workbench.html">a</a><br>
<a href="http://localhost/org.eclipse.platform.doc.user/contexts_ExternalTools.html">a</a><br>
<a href="http://localhost/org.eclipse.platform.doc.user/contexts_Search.html">a</a><br>
<a href="http://localhost/org.eclipse.platform.doc.user/contexts_Team.html">a</a><br>
<a href="http://localhost/org.eclipse.platform.doc.user/contexts_Team_CVS.html">a</a><br>
<a href="http://localhost/org.eclipse.platform.doc.user/contexts_Update.html">a</a><br>

<a href="http://localhost/org.eclipse.platform.doc.user/toc.html">a</a><br>
***** END LINK TESTING TEMPLATE *****